name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  deploy-web:
    name: Deploy Web App
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.4
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build web app
        run: pnpm build --filter=web
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY || 'placeholder-key' }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL || 'https://docshot-ai.vercel.app' }}
        
      - name: Deploy to Vercel
        if: ${{ secrets.VERCEL_TOKEN != '' }}
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          vercel-args: '--prod'
          
      - name: Skip Vercel deployment
        if: ${{ secrets.VERCEL_TOKEN == '' }}
        run: |
          echo "‚ö†Ô∏è Vercel deployment skipped - VERCEL_TOKEN not configured"
          echo "To enable Vercel deployment, add the following secrets:"
          echo "- VERCEL_TOKEN"
          echo "- VERCEL_ORG_ID" 
          echo "- VERCEL_PROJECT_ID"

  deploy-worker:
    name: Deploy Worker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.4
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build worker
        run: pnpm build --filter=worker
        
      - name: Deploy to Railway
        if: ${{ secrets.RAILWAY_TOKEN != '' }}
        run: |
          echo "‚ö†Ô∏è Railway deployment requires manual setup"
          echo "Install Railway CLI and deploy manually:"
          echo "npm install -g @railway/cli"
          echo "railway login"
          echo "railway up --service docshot-worker"
          
      - name: Skip Railway deployment
        if: ${{ secrets.RAILWAY_TOKEN == '' }}
        run: |
          echo "‚ö†Ô∏è Railway deployment skipped - RAILWAY_TOKEN not configured"
          echo "To enable Railway deployment, add RAILWAY_TOKEN secret"
          echo "For now, deploy manually using Railway CLI"

  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: Run migrations
        if: ${{ secrets.SUPABASE_ACCESS_TOKEN != '' && secrets.SUPABASE_PROJECT_REF != '' }}
        run: |
          supabase projects list
          supabase db push --linked --include-all
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          
      - name: Skip database migrations
        if: ${{ secrets.SUPABASE_ACCESS_TOKEN == '' || secrets.SUPABASE_PROJECT_REF == '' }}
        run: |
          echo "‚ö†Ô∏è Database migrations skipped - Supabase credentials not configured"
          echo "To enable database migrations, add the following secrets:"
          echo "- SUPABASE_ACCESS_TOKEN"
          echo "- SUPABASE_PROJECT_REF"

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-web, deploy-worker, migrate-database]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deployment summary
        run: |
          echo "üìã Deployment Summary"
          echo "=================="
          echo "Web app status: ${{ needs.deploy-web.result }}"
          echo "Worker status: ${{ needs.deploy-worker.result }}"
          echo "Database status: ${{ needs.migrate-database.result }}"
          echo ""
          
          if [[ "${{ needs.deploy-web.result }}" == "success" ]]; then
            echo "‚úÖ Web app build completed successfully"
          else
            echo "‚ùå Web app build failed"
          fi
          
          if [[ "${{ needs.deploy-worker.result }}" == "success" ]]; then
            echo "‚úÖ Worker build completed successfully"
          else
            echo "‚ùå Worker build failed"
          fi
          
          if [[ "${{ needs.migrate-database.result }}" == "success" ]]; then
            echo "‚úÖ Database operations completed successfully"
          else
            echo "‚ö†Ô∏è Database operations skipped or failed"
          fi
          
          echo ""
          echo "üí° Note: Some deployments may be skipped if secrets are not configured"
          echo "This is expected for development builds"