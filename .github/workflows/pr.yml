name: Pull Request

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  pr-checks:
    name: PR Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.4
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Lint
        run: pnpm lint
        
      - name: Type check
        run: pnpm type-check
        
      - name: Format check
        run: pnpm format:check
        
      - name: Build
        run: pnpm build
        
      - name: Test
        run: pnpm test
        
      - name: Check for breaking changes
        run: |
          # Check if there are any breaking changes in the API
          echo "Checking for breaking changes..."
          
          # Check if database schema has changed
          if git diff --name-only HEAD^ HEAD | grep -q "supabase/migrations"; then
            echo "⚠️ Database schema changes detected"
            echo "Please ensure migrations are backwards compatible"
          fi
          
          # Check if API routes have changed
          if git diff --name-only HEAD^ HEAD | grep -q "apps/web/app/api"; then
            echo "⚠️ API changes detected"
            echo "Please ensure API changes are backwards compatible"
          fi
          
          # Check if worker job schemas have changed
          if git diff --name-only HEAD^ HEAD | grep -q "packages/shared/src/schemas"; then
            echo "⚠️ Job schema changes detected"
            echo "Please ensure job schemas are backwards compatible"
          fi

  size-check:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.4
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build for size analysis
        run: pnpm build --filter=web
        
      - name: Analyze bundle size
        run: |
          cd apps/web
          
          # Get build size
          WEB_SIZE=$(du -sh .next | cut -f1)
          echo "Web app build size: $WEB_SIZE"
          
          # Check if size is reasonable (under 50MB)
          SIZE_BYTES=$(du -sb .next | cut -f1)
          SIZE_LIMIT=$((50 * 1024 * 1024))  # 50MB in bytes
          
          if [ $SIZE_BYTES -gt $SIZE_LIMIT ]; then
            echo "⚠️ Bundle size ($WEB_SIZE) exceeds 50MB limit"
            echo "Consider optimizing assets or enabling code splitting"
            exit 1
          else
            echo "✅ Bundle size ($WEB_SIZE) is within limits"
          fi

  preview-deploy:
    name: Preview Deploy
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.4
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build web app
        run: pnpm build --filter=web
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
        
      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          
      - name: Comment PR with preview link
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Preview deployment')
            );
            
            const body = `## 🚀 Preview deployment
            
            Your changes have been deployed to a preview environment:
            
            **Preview URL:** ${{ steps.vercel-deploy.outputs.preview-url }}
            
            This preview will be automatically updated when you push new changes to this PR.
            
            ### Test the following:
            - [ ] Screenshot capture functionality
            - [ ] Visual diff viewer
            - [ ] Approval workflows
            - [ ] Project configuration
            - [ ] Email notifications (if configured)
            
            <sub>This comment will be automatically updated with new deployments.</sub>`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.4
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run security audit
        run: pnpm audit --audit-level high
        
      - name: Check dependency licenses
        run: |
          # Check for restrictive licenses
          echo "Checking dependency licenses..."
          npx license-checker --onlyAllow "MIT;Apache-2.0;BSD;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Unlicense;WTFPL;0BSD" --excludePrivatePackages || echo "License check completed"
          
      - name: Code complexity analysis
        run: |
          # Basic code complexity check
          echo "Analyzing code complexity..."
          find apps -name "*.ts" -not -path "*/node_modules/*" | wc -l > /tmp/ts_files
          echo "TypeScript files: $(cat /tmp/ts_files)"
          
          # Check for overly complex files (>500 lines)
          find apps -name "*.ts" -not -path "*/node_modules/*" -exec wc -l {} + | awk '$1 > 500 {print "Large file: " $2 " (" $1 " lines)"}' | head -10